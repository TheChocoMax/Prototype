---
import Main from '../layouts/Main.astro';
import products from '../assets/products.json';
import orders from '../assets/orders.json';
import comments from '../assets/comments.json';

import { SITE_NAME } from '../config.js';

// Count the number of orders for each product
const productOrders: Record<number, number> = {};
orders.forEach(order => {
    order.order.forEach(product => {
        const productId: number = product.product_id;
        if (productOrders[productId]) {
            productOrders[productId]++;
        } else {
            productOrders[productId] = 1;
        }
    });
});
---

<Main title=`${SITE_NAME} - Admin Panel`>
    <h1>Admin Panel</h1>
    <div id="admin-panel">
        <span id="products">
            <h2>Products</h2>
            <table>
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Status</th>
                        <th>Product Name</th>
                        <th>Orders</th>
                    </tr>
                </thead>
                <tbody>
                    {products.map((product, index) => (
                        <tr key={index}>
                            <td>{index + 1}</td>
                            <td>{product.status == 'Available' ? "âœ…" : product.status}</td>
                            <td>{product.product_name}</td>
                            <td>{productOrders[product.product_id] || 0}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </span>
        <span>
            <h2>Current Orders</h2>
            <div id="orders">
            {orders.map(order => (
                <div class="order-card">
                    <span style="grid-area: order-id;">#{order.order_id}</span>
                    <span style="grid-area: order-date;">{order.date}</span>
                    <span style="grid-area: customer-name;">Customer: {order.customer_name}</span>
                    <ul style="grid-area: order-products;">{order.order.map(product => (
                        <li>{product.product_name}</li>
                    ))}</ul>
                    <span style="grid-area: transaction-status;">Transaction Status: {order.transaction_status}</span>
                </div>
            ))}
            </div>
        </span>
        <span id="comments">
            <h2>Latest Comments</h2>
            {comments.map((comment, index) => (
                <div class="comment-card">
                    <span>#{index + 1}</span>
                    <span>{comment.date}</span>
                    <span>Customer: {comment.customer_name}</span>
                    <span>Product: {comment.product_name}</span>
                    <p>{comment.comment}</p>
                </div>
            ))}
        </span>
        <span id="income">
            <h2>Estimated Gross Income</h2>
            <p>Total Gross Income: {orders.reduce((total, order) => total + order.total_price, 0)}</p>
            <p>Average Order Value: {orders.length ? (orders.reduce((total, order) => total + order.total_price, 0) / orders.length).toFixed(2) : 0}</p>
            <p>Number of Orders: {orders.length}</p>
            <p>Number of Customers: {new Set(orders.map(order => order.customer_name)).size}</p>
        </span>
    </div>
</Main>

<style>
    table {
        display: table;
        width: 100%;
        border-collapse: collapse;
    }

    td {
        text-align: center;
    }

    .comment-card {
        background-color: #111;
        border-radius: var(--border-radius-small);
        gap: var(--spacing-small);
        padding: var(--spacing-small);
        width: 100%;
    }

    .order-card {
        align-items: center;
        background-color: #111;
        border-radius: var(--border-radius-small);
        display: grid;
        grid-template:
            "order-id order-date" 1fr
            "customer-name customer-name" 1fr
            "order-products order-products" 1fr
            "transaction-status transaction-status" 1fr / 1fr 1fr;
        padding: 0 var(--spacing-small);
        width: clamp(250px, 30%, var(--card-size-wide));
        height: clamp(var(--card-size-narrow), 200px, var(--card-size-wide));
    }

    .product-details {
        display: flex;
        gap: var(--spacing-medium);
        justify-content: space-between;
        width: 100%;
    }

    #admin-panel {
        display: grid;
        gap: var(--spacing-medium);
        grid-template:
            "products orders" 1fr
            "comments income" 1fr / 1fr 1fr;
        height: 100%;
        width: 90%;
    }

    #admin-panel > span {
        background-color: #888;
        border-radius: var(--border-radius-large);
        overflow-y: auto;
        padding: var(--spacing-medium);
    }

    #comments {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    #orders {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: var(--spacing-small);
    }

    /* Pseudo-classes */

    #admin-panel > span:hover {
        background-color: #aaa;
    }

    tr:not(:last-child) {
        border-bottom: 1px solid #ccc;
    }


    @media screen and (width<=850px) {
        #admin-panel {
            grid-template:
                "products" 1fr
                "orders" 1fr
                "comments" 1fr
                "income" 1fr / 1fr;
            width: 95%;
        }
    }
</style>
