---
import Main from '../layouts/Main.astro'
import products from '../assets/products.json'
import orders from '../assets/orders.json'
import comments from '../assets/comments.json'

// Count the number of orders for each product
const productOrders: Record<number, number> = {}
orders.forEach((order) => {
    order.order.forEach((product) => {
        const productId: number = product.product_id
        if (productOrders[productId]) {
            productOrders[productId]++
        } else {
            productOrders[productId] = 1
        }
    })
})
---

<Main title="Admin Panel">
    <div id="admin-panel">
        <span id="products">
            <h2>Products</h2>
            <table>
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Status</th>
                        <th>Product Name</th>
                        <th>Orders</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        products.map((product, index) => (
                            <tr key={index}>
                                <td>{index + 1}</td>
                                <td>
                                    {product.status == 'Available'
                                        ? '✅'
                                        : product.status}
                                </td>
                                <td>{product.product_name}</td>
                                <td>
                                    {productOrders[product.product_id] || 0}
                                </td>
                                <td class="edit-product">✏️</td>
                            </tr>
                        ))
                    }
                </tbody>
            </table>
        </span>
        <span>
            <h2>Current Orders</h2>
            <div id="orders">
                {
                    orders.map((order) => (
                        <div class="order-card">
                            <span style="grid-area: order-id;">
                                #{order.order_id}
                            </span>
                            <span style="grid-area: order-date;">
                                {order.date}
                            </span>
                            <span style="grid-area: customer-name;">
                                Customer: {order.customer_name}
                            </span>
                            <span style="grid-area: order-products;">
                                <span>Order:</span>
                                <ul class="order-products">
                                    {order.order.map((product) => (
                                        <li>{product.product_name}</li>
                                    ))}
                                </ul>
                            </span>
                            <span style="grid-area: transaction-status;">
                                Transaction Status: {order.transaction_status}
                            </span>
                        </div>
                    ))
                }
            </div>
        </span>
        <span id="comments">
            <h2>Latest Comments</h2>
            {
                comments.map((comment) => (
                    <div class="comment-card">
                        <span>{comment.product_name}</span>
                        <span>@{comment.customer_name}</span>
                        <span>{comment.date}</span>
                        <p>{comment.comment}</p>
                    </div>
                ))
            }
        </span>
        <span id="income">
            <h2>Estimated Gross Income</h2>
            <h3>
                Total Gross Income: CA${
                    orders.reduce(
                        (total, order) => total + order.total_price,
                        0
                    )
                }
            </h3>
            <h3>
                Average Order Value: CA${
                    orders.length
                        ? (
                              orders.reduce(
                                  (total, order) => total + order.total_price,
                                  0
                              ) / orders.length
                          ).toFixed(2)
                        : 0
                }
            </h3>
            <h3>Number of Orders: {orders.length}</h3>
            <h3>
                Number of Customers: {
                    new Set(orders.map((order) => order.customer_name)).size
                }
            </h3>
        </span>
    </div>
</Main>

<style>
    table {
        display: table;
        width: 100%;
        border-collapse: collapse;
    }

    td {
        text-align: center;
    }

    ul {
        padding-left: var(--spacing-medium);
    }

    .comment-card {
        background-color: light-dark(rgb(0 0 0 / 0.1), rgb(255 255 255 / 0.1));
        border-radius: var(--border-radius-small);
        gap: var(--spacing-small);
        padding: var(--spacing-small);
        width: 100%;
    }

    .edit-product {
        cursor: pointer;
    }

    .order-card {
        align-items: center;
        background-color: light-dark(rgb(0 0 0 / 0.1), rgb(255 255 255 / 0.1));
        border-radius: var(--border-radius-small);
        display: grid;
        grid-template:
            'order-id order-date' 1fr
            'customer-name customer-name' 1fr
            'order-products order-products' 1fr
            'transaction-status transaction-status' 1fr / 1fr 1fr;
        height: clamp(var(--card-size-narrow), 200px, var(--card-size-wide));
        overflow: auto;
        padding: 0 var(--spacing-small);
        width: clamp(250px, 30%, var(--card-size-wide));
    }

    .product-details {
        display: flex;
        gap: var(--spacing-medium);
        justify-content: space-between;
        width: 100%;
    }

    #admin-panel {
        display: grid;
        gap: var(--spacing-medium);
        grid-template:
            'products orders' 1fr
            'comments income' 1fr / 1fr 1fr;
        height: 100%;
        width: 90%;
    }

    #admin-panel > span {
        background-color: light-dark(rgb(0 0 0 / 0.2), rgb(255 255 255 / 0.1));
        border-radius: var(--border-radius-large);
        overflow-y: auto;
        padding: var(--spacing-medium);
        max-height: 40svh;
    }

    #income {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    #comments {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    #orders {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: var(--spacing-small);
    }

    /* Pseudo-classes */

    h3:hover,
    tbody > tr:hover,
    .comment-card:hover,
    .order-card:hover,
    #admin-panel > span:hover {
        background-color: light-dark(rgb(0 0 0 / 0.3), rgb(255 255 255 / 0.2));
    }

    tr:not(:last-child) {
        border-bottom: 1px solid light-dark(#333, #ccc);
    }

    @media screen and (width<=850px) {
        #admin-panel {
            grid-template:
                'products' 1fr
                'orders' 1fr
                'comments' 1fr
                'income' 1fr / 1fr;
            width: 95%;
        }
    }
</style>
